%option main
DIGIT [0-9]
INT_TYPE int
BOOLEAN_TYPE bool
STRING_TYPE string
DOUBLE_TYPE double
COMMENT \$\$[a-zA-Z0-9_\!\'\^\#\+\$\%\&\/\{\(\[\)\]\=\}\\\*\?\-\_\;\,\`\"\.\: ]*\$\$
STRING \"[a-zA-Z0-9_\!\'\^\#\+\$\%\&\/\{\(\[\)\]\=\}\\\*\?\-\_\;\,\`\.\: ]*\"
LETTER [a-zA-Z]
LP \(
RP \)
LB \{
RB \}
LSB \[
RSB \]
COMMA ,
IF is
WHILE while
FOR for
ASSGMNT_OP =
LOW_PRECEDENCE_OP \+|\-
HIGH_PRECEDENCE_OP \*|\/
BOOL_OP \&\&|\|\||==|>|<|<=|>=|!=
UNARY_POSTFIX_OP \+\+|\-\-|\*\*
UNARY_OP \+=|\-=|\*=|\/=|\%=|\^=
END_STMNT_OP \;
INT [+-]?({DIGIT})+
DOUBLE [+-]?{DIGIT}*(\.)?{DIGIT}+
POWER_OP \^
FUNCTION_DEC fnc\:\:
QUESTION_MARKS \?\?
WHILE_END endwhile
FOR_END endfor
RETURN return
ENDIS endis
OR_STMT or
ENDOR endor
ELSE_STMT else
ENDELSE endelse
IN in
OUT out
VOID void
TRUE true
FALSE false
STR_OP \"
WORD {LETTER}+
IDENTIFIER [a-zA-Z][a-zA-Z0-9_]*
RESERVED_RETURN_FNC getHeading|getAltitude|getTemperature|connect
RESERVED_VOID_FNC move_vertical|move_horizontal|turn|move|toggle_spray|timer
%%
\n printf("\n");
[ ] printf(" ");
[\t] printf("\t");
\. printf("<DOT>");
{INT_TYPE} printf("<INT_TYPE>");
{BOOLEAN_TYPE} printf("<BOOLEAN_TYPE>");
{STRING_TYPE} printf("<STRING_TYPE>");
{DOUBLE_TYPE} printf("<DOUBLE_TYPE>");
{ASSGMNT_OP} printf("<ASSGMNT_OP>");
{BOOL_OP} printf("<BOOL_OP>");
{COMMENT} printf("<COMMENT>");
{ELSE_STMT} printf("<ELSE_STMT>");
{LP} printf("<LP>");
{RP} printf("<RP>");
{LB} printf("<LB>");
{RB} printf("<RB>");
{LSB} printf("<LSB>");
{RSB} printf("<RSB>");
{COMMA} printf("<COMMA>");
{INT} printf("<INT>");
{DOUBLE} printf("<DOUBLE>");
{IF} printf("<IF>");
{WHILE} printf("<WHILE>");
{FOR} printf("<FOR>");
{TRUE} printf("<TRUE>");
{FALSE} printf("<FALSE>");
{RETURN} printf("<RETURN>");
{FUNCTION_DEC} printf("<FUNC_DEC>");
{QUESTION_MARKS} printf("<QUESTION_MARKS>");
{END_STMNT_OP} printf("<END_STMNT_OP>");
{ENDIS} printf("<ENDIS>");
{ENDOR} printf("<ENDOR>");
{OR_STMT} printf("<OR_STMT>");
{ENDELSE} printf("<ENDELSE>");
{WHILE_END} printf("<WHILE_END>");
{FOR_END} printf("<FOR_END>");
{IN} printf("<IN>");
{OUT} printf("<OUT>");
{VOID} printf("<VOID>");
{STR_OP} printf("<STR_OP>");
{LOW_PRECEDENCE_OP} printf("<LOW_PRECEDENCE_OP>");
{HIGH_PRECEDENCE_OP} printf("<HIGH_PRECEDENCE_OP>");
{UNARY_POSTFIX_OP} printf("<UNARY_POSTFIX_OP>");
{UNARY_OP} printf("<UNARY_OP>");
{POWER_OP} printf("<POWER_OP>");
{RESERVED_RETURN_FNC} printf("<RESERVED_RETURN_FNC>");
{RESERVED_VOID_FNC} printf("<RESERVED_VOID_FNC>");
{IDENTIFIER} printf("<IDENTIFIER>");
{STRING} printf("<STRING>");
. ;
%%